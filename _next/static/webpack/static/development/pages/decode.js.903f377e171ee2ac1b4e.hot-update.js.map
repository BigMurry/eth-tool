{"version":3,"file":"static/webpack/static/development/pages/decode.js.903f377e171ee2ac1b4e.hot-update.js","sources":["webpack:///./pages/decode.js"],"sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport txDecoder from 'ethereum-tx-decoder';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport { Api, JsonRpc } from 'eosjs';\nimport fetch from 'isomorphic-unfetch';\nimport { decode } from 'ripple-binary-codec';\nimport { transactionID } from 'ripple-binary-codec/distrib/npm/hashes';\nimport BN from 'bignumber.js';\nimport traverse from 'traverse';\nimport * as ethers from 'ethers';\n\nimport Root from '../components/Root';\nimport {v2 as abi} from '../lib/erc20-abi';\nrequire('buffer');\n\nconst useStyles = makeStyles(theme => ({\n  cont: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '800px',\n    margin: 'auto'\n  },\n  btn: {\n    margin: '10px 0 60px 0'\n  }\n}));\n\nfunction formatEventValues(values, precision = 1e0) {\n  const trimValues = Object.keys(values).reduce((ret, k) => {\n    if (!/^\\d+$/.test(k) && k !== 'length') {\n      ret[k] = values[k];\n    }\n    return ret;\n  }, {});\n  const ret = traverse(trimValues).map(function(v) {\n    if (v.hasOwnProperty('_hex')) {\n      console.log('bignumber');\n      const bn = new BN(v.toString()).dividedBy(precision);\n      this.update(bn.toString());\n    }\n  });\n  return ret;\n}\n\nasync function decodeEos(\n  rawTx,\n  eosNode = 'https://api.eossweden.org',\n  chainId = 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'\n) {\n  const rpc = new JsonRpc(eosNode, { fetch });\n  const api = new Api({\n    rpc,\n    // signatureProvider: new SignatureProvider(),\n    chainId,\n    textEncoder: new TextEncoder(),\n    textDecoder: new TextDecoder()\n  });\n  const res = await api.deserializeTransactionWithActions(rawTx);\n  const hash = await eosHash(rawTx);\n  return Object.assign({hash}, res);\n}\n\nfunction xrpHash(raw) {\n  return transactionID(Buffer.from(raw, 'hex')).toString('hex');\n}\n\nconst fromHexString = hexString =>\n  new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\nasync function eosHash(hex) {\n  const hashBuffer = await window.crypto.subtle.digest('SHA-256', fromHexString(hex)); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\n  return hashHex;\n}\n\nfunction decodeXrp(rawTx) {\n  const hash = xrpHash(rawTx);\n  return Object.assign({hash}, decode(rawTx));\n}\n\nasync function decodeTx(rawTx, txType) {\n  if (txType === TX_TYPES.DEFAULT || txType === TX_TYPES.ERC20) {\n    return decodeEth(rawTx, txType);\n  }\n  if (txType === TX_TYPES.XRP) {\n    return decodeXrp(rawTx);\n  }\n  if (txType === TX_TYPES.EOS) {\n    return decodeEos(rawTx);\n  }\n  return {\n    error: 'NOT support'\n  };\n}\n\nfunction decodeEth(rawTx, txType) {\n  const ethTx = new Tx(rawTx);\n  const tx = txDecoder.decodeTx(rawTx);\n  if (txType === TX_TYPES.ERC20) {\n    const fnDecoder = new txDecoder.FunctionDecoder(abi);\n    const data = fnDecoder.decodeFn(tx.data);\n    tx.decodeData = formatEventValues(data);\n  }\n  tx.gasPrice = tx.gasPrice.toString();\n  tx.gasLimit = tx.gasLimit.toString();\n  tx.value = tx.value.toString();\n  const hash = ethers.utils.keccak256(rawTx);\n  return Object.assign(\n    {\n      hash,\n      from: '0x' + ethTx.getSenderAddress().toString('hex')\n    },\n    tx\n  );\n}\n\nconst TX_TYPES = {\n  DEFAULT: 10,\n  ERC20: 20,\n  XRP: 30,\n  EOS: 40\n};\n\nlet Decode = function() {\n  const classes = useStyles();\n  const [rawTx, setRawTx] = useState('');\n  const [plainTx, setPlainTx] = useState('');\n  const [txType, setTxType] = useState(10);\n  const inputLabel = React.useRef(null);\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  React.useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n  }, []);\n\n  return (\n    <Root>\n      <div className={classes.cont}>\n        <TextField\n          multiline\n          id='raw'\n          label='Raw transaction'\n          rows={3}\n          className={classes.tx}\n          value={rawTx}\n          onChange={e => setRawTx(e.target.value)}\n          margin='normal'\n          variant='outlined'\n        />\n        <FormControl variant={'outlined'} className={classes.formControl}>\n          <InputLabel ref={inputLabel} id='tx-type'>\n            Tx type\n          </InputLabel>\n          <Select\n            id='tx-type-select'\n            value={txType}\n            onChange={e => setTxType(e.target.value)}\n            labelWidth={labelWidth}\n          >\n            <MenuItem value={TX_TYPES.DEFAULT}>\n              <em>Eth default</em>\n            </MenuItem>\n            <MenuItem value={TX_TYPES.ERC20}>ERC20</MenuItem>\n            <MenuItem value={TX_TYPES.XRP}>XRP</MenuItem>\n            <MenuItem value={TX_TYPES.EOS}>EOS</MenuItem>\n          </Select>\n        </FormControl>\n        <Button\n          size={'large'}\n          variant='contained'\n          color='secondary'\n          className={classes.btn}\n          onClick={async _ => {\n            setPlainTx('waiting...');\n            try {\n              const tx = await decodeTx(rawTx, txType);\n              setPlainTx(JSON.stringify(tx, null, 2));\n            } catch (e) {\n              setPlainTx(`error message: ${e.message || e}`);\n              console.log(e);\n            }\n          }}>\n          Decode Tx\n        </Button>\n        <TextField\n          multiline\n          disabled\n          rows={15}\n          id='output-box'\n          label='Decoded Transaction'\n          className={classes.lgTx}\n          value={plainTx}\n          margin='normal'\n          variant='outlined'\n        />\n      </div>\n    </Root>\n  );\n};\n\nexport default Decode;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAPA;AAAA;AACA;AAWA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAAA;AACA;AADA;AAaA;AAbA;AAAA;AACA;AADA;AAcA;AAdA;AAeA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAWA;AADA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;A","sourceRoot":""}