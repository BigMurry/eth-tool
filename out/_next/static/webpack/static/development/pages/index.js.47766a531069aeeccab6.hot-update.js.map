{"version":3,"file":"static/webpack/static/development/pages/index.js.47766a531069aeeccab6.hot-update.js","sources":["webpack:///./lib/core.js"],"sourcesContent":["import * as ethers from 'ethers';\nimport * as stringify from 'json-stable-stringify';\nimport {\n  ecsign,\n  privateToAddress\n} from 'ethereumjs-util';\nimport Mnemonic from 'bitcore-mnemonic';\nimport {fromExtendedKey} from 'ethereumjs-wallet/hdkey';\n\nconst BIP44_PATH = `m/44'/60'/0'/0`;\n\nexport function jsonHash(obj) {\n  const json = stringify(obj);\n  return ethers.utils.keccak256(\n    ethers.utils.toUtf8Bytes(json)\n  );\n}\n\nexport function sign(privateKey, msgHash) {\n  msgHash = Buffer.from(msgHash.replace(/^0x/, ''), 'hex');\n  const sig = ecsign(msgHash, privateKey);\n  const ret = {\n    r: sig.r.toString('hex'),\n    s: sig.s.toString('hex'),\n    v: sig.v\n  };\n  ret.messageHash = msgHash.toString('hex');\n  ret.signature = `0x${ret.r}${ret.s}${ret.v.toString(16)}`;\n  ret.r = '0x' + ret.r;\n  ret.s = '0x' + ret.s;\n  return ret;\n}\n\nexport function validSeedOrPrivKey(seedOrPrivKey) {\n  return /^[0-9a-fA-F]{64}$/.test(seedOrPrivKey) || seedOrPrivKey.split(' ').length === 12;\n}\n\nexport function decodeSeed(seedOrPrivKey, idx) {\n  let privKey;\n  let address;\n  try {\n    if (!/^[0-9a-fA-F]{64}$/.test(seedOrPrivKey)) { // not privKey\n      const { xprivkey } = new Mnemonic(seedOrPrivKey).toHDPrivateKey();\n      const hdKey = fromExtendedKey(xprivkey);\n      const ethereumNode = hdKey.derivePath(BIP44_PATH);\n      const wallet = ethereumNode.deriveChild(idx).getWallet();\n      privKey = wallet.getPrivateKey();\n    } else {\n      privKey = ethers.utils.arrayify(privKey);\n    }\n    address = '0x' + privateToAddress(privKey).toString('hex');\n  } catch (e) {\n    console.log(e);\n  }\n  return {\n    privKey,\n    address\n  };\n}\n\nexport function signJSON(privKey, obj) {\n  const hash = jsonHash(obj);\n  const sig = sign(privKey, hash);\n  return sig;\n}\n\nexport async function providerSignObj(provider, obj) {\n  // const msg = `coke bet unlock session wallet`;\n  // window.__provider = provider;\n  let msg = stringify(obj);\n  try {\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    msg = ethers.utils.toUtf8Bytes(msg);\n    /*\n    if (provider._web3Provider.isTrust) {\n      window.alert('debug: prepare sign');\n    }\n    */\n    const sig = await provider.send('personal_sign', [ethers.utils.hexlify(msg), addr.toLowerCase()]);\n    /*\n    if (provider._web3Provider.isTrust) {\n      window.alert(`debug: sig returns, ${sig}`);\n    }\n    */\n    return sig;\n  } catch (e) {\n    /*\n    if (provider._web3Provider.isTrust) {\n      window.alert(`debug: exception occured, ${e.message}`);\n    }\n    */\n    return null;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AACA;AACA;;;;;;AARA;AAAA;AACA;AADA;AAaA;AAbA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;A","sourceRoot":""}